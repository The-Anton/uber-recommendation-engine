<meta charset="UTF-8" />
<title>Uber</title>

<script src="https://cdn.tailwindcss.com"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css"
></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<script
src="https://cdn.jsdelivr.net/gh/denissellu/routeboxer@master/src/RouteBoxer.js"
type="text/javascript"
></script>
<script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyCATtupoIdp7bend_fjJmKy52HLRxSz_oA"></script>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500&display=swap" rel="stylesheet">    
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script>
  var map = null;
  var boxpolys = null;
  var directions = null;
  var routeBoxer = null;
  var distance = null; // km
  var service = null;
  var gmarkers = [];
  var boxes = null;
  var infowindow = new google.maps.InfoWindow();

  // check for Geolocation support
  if (navigator.geolocation) {
    console.log("Geolocation is supported!");
  } else {
    console.log("Geolocation is not supported for this Browser/OS.");
  }

  window.onload = function () {
    //showRecommendationCard()
    var startPos;
    var geoOptions = {
      enableHighAccuracy: true,
    };

    var geoSuccess = function (position) {
      startPos = position;
      latitude = startPos.coords.latitude;
      longitude = startPos.coords.longitude;
      google.maps.event.addDomListener(
        window,
        "load",
        initialize(latitude, longitude)
      );
    };
    var geoError = function (error) {
      console.log("Error occurred. Error code: " + error.code);
      // error.code can be:
      //   0: unknown error
      //   1: permission denied
      //   2: position unavailable (error response from location provider)
      //   3: timed out
    };

    navigator.geolocation.getCurrentPosition(geoSuccess, geoError, geoOptions);
  };



  function showRecommendationCard(){
            
      $(function(){
          $('.slider-card').trigger('click');
      });
      // let recommendElement = document.getElementById("recommendPlacesButton");
      // recommendElement.trigger('click');
  }

        
  function initialize(latitude, longitude) {
    // Default the map view to the continental U.S.
    var mapOptions = {
      center: new google.maps.LatLng(latitude, longitude),
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      zoom: 12,
    };

    map = new google.maps.Map(document.getElementById("map"), mapOptions);
    service = new google.maps.places.PlacesService(map);

    routeBoxer = new RouteBoxer();

    directionService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer({
      map: map,
      polylineOptions: {
        strokeColor: 'black',
        strokeWeight: 4
      }
    });

    let mapStyles = [{
        "featureType": "administrative",
        "elementType": "geometry",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "administrative.land_parcel",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "administrative.neighborhood",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "poi",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "poi",
        "elementType": "labels.text",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "road",
        "elementType": "labels",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "road",
        "elementType": "labels.icon",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "transit",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "water",
        "elementType": "labels.text",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      }
    ]

    map.set('styles', mapStyles);
    document.getElementById("submitMultiplePlaces").addEventListener("click", () => {
      calculateAndDisplayRoute("Army Institute of Technolgy", "Army Institute of Technolgy", directionService, directionsRenderer);
    });

    // If there are any parameters at eh end of the URL, they will be in  location.search
    // looking something like  "?marker=3"

    // skip the first character, we are not interested in the "?"
    var query = location.search.substring(1);

    // split the rest at each "&" character to give a list of  "argname=value"  pairs
    var pairs = query.split("&");
    for (var i = 0; i < pairs.length; i++) {
      // break each pair at the first "=" to obtain the argname and value
      var pos = pairs[i].indexOf("=");
      var argname = pairs[i].substring(0, pos).toLowerCase();
      var value = pairs[i].substring(pos + 1).toLowerCase();

      // process each possible argname  -  use unescape() if theres any chance of spaces
      if (argname == "to") {
        document.getElementById("to").value = unescape(value);
      }
      if (argname == "from") {
        document.getElementById("from").value = unescape(value);
      }
      if (argname == "dist") {
        document.getElementById("distance").value = parseFloat(value);
      }
      if (argname == "type") {
        document.getElementById("type").value = unescape(value);
      }
      if (argname == "keyword") {
        document.getElementById("keyword").value = unescape(value);
      }
      if (argname == "name") {
        document.getElementById("name").value = unescape(value);
      }
      if (argname == "submit") {
        route();
      }
    }


  }

  function route() {
    // Clear any previous route boxes from the map
    clearBoxes();

    // Convert the distance to box around the route from miles to km
    distance = parseFloat(document.getElementById("distance").value) * 1.609344;

    var request = {
      origin: document.getElementById("from").value,
      destination: document.getElementById("to").value,
      travelMode: google.maps.DirectionsTravelMode.DRIVING,
    };

    // Make the directions request
    directionService.route(request, function (result, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        directionsRenderer.setDirections(result);

        // Box around the overview path of the first route
        var path = result.routes[0].overview_path;
        boxes = routeBoxer.box(path, distance);
        // alert(boxes.length);
        drawBoxes();
        findPlaces(0);
      } else {
        alert("Directions query failed: " + status);
      }
    });
  }

  // Draw the array of boxes as polylines on the map
  function drawBoxes() {
    boxpolys = new Array(boxes.length);
    for (var i = 0; i < boxes.length; i++) {
      boxpolys[i] = new google.maps.Rectangle({
        bounds: boxes[i],
        fillOpacity: 0,
        strokeOpacity: 1.0,
        strokeColor: "#000000",
        strokeWeight: 1,
        map: map,
      });
    }
  }

  function findPlaces(searchIndex) {
    var type = "tourist"; //document.getElementById('type').value;
    var keyword = "visit"; //document.getElementById('keyword').value;
    var name = ""; //document.getElementById('name').value;
    var request = {
      bounds: boxes[searchIndex],
    };
    if (!!type && type != "") {
      if (type.indexOf(",") > 0) request.types = type.split(",");
      else request.types = [type];
    }
    if (!!keyword && keyword != "") request.keyword = keyword;
    if (!!name && name != "") request.name = name;
    service.nearbySearch(request, function (results, status) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        //document.getElementById('recommendation_area').innerHTML += "bounds[" + searchIndex + "] returns " + results.length + " results<br>"
        for (var i = 0, result; (result = results[i]); i++) {
          let typesArray = result.types;
          console.log(typesArray);
          if (typesArray.includes("tourist_attraction")) {
            var marker = createMarker(result);
          }
        }
      } else {
        document.getElementById("recommendation_area").innerHTML +=
          "bounds[" +
          searchIndex +
          "] returns 0 results<br>&nbsp;status=" +
          status +
          "<br>";
      }
      if (status != google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
        searchIndex++;
        if (searchIndex < boxes.length) findPlaces(searchIndex);
      } else {
        // delay 1 second and try again
        setTimeout("findPlaces(" + searchIndex + ")", 1000);
      }
    });
  }

  // Clear boxes currently on the map
  function clearBoxes() {
    if (boxpolys != null) {
      for (var i = 0; i < boxpolys.length; i++) {
        boxpolys[i].setMap(null);
      }
    }
    boxpolys = null;
  }

  function createMarker(place) {
    var placeLoc = place.geometry.location;
    if (place.icon) {
      var image = new google.maps.MarkerImage(
        place.icon,
        new google.maps.Size(71, 71),
        new google.maps.Point(0, 0),
        new google.maps.Point(17, 34),
        new google.maps.Size(25, 25)
      );
    } else
      var image = {
        url: "https://maps.gstatic.com/intl/en_us/mapfiles/markers2/measle.png",
        size: new google.maps.Size(7, 7),
        anchor: new google.maps.Point(3.5, 3.5),
      };

    var marker = new google.maps.Marker({
      map: map,
      icon: image,
      position: place.geometry.location,
    });
    var request = {
      reference: place.reference,
    };
    google.maps.event.addListener(marker, "click", function () {
      service.getDetails(request, function (place, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
          var contentStr =
            "<h5>" + place.name + "</h5><p>" + place.formatted_address;
          if (!!place.formatted_phone_number)
            contentStr += "<br>" + place.formatted_phone_number;
          if (!!place.website)
            contentStr +=
              '<br><a target="_blank" href="' +
              place.website +
              '">' +
              place.website +
              "</a>";
          contentStr += "<br>" + place.types + "</p>";
          infowindow.setContent(contentStr);
          infowindow.open(map, marker);
        } else {
          var contentStr = "<h5>No Result, status=" + status + "</h5>";
          infowindow.setContent(contentStr);
          infowindow.open(map, marker);
        }
      });
    });
    gmarkers.push(marker);
    console.log(place);
    if (!place.name) place.name = "result " + gmarkers.length;

    renderRecommendations(gmarkers, place);
  }

  function renderRecommendations(gmarkers, place) {
    var recommendation_area_html = 
                `<div class="place-card relative flex bg-white-200 p-5 shadow rounded-2xl border-gray-500 shadow-2xl" style="width: 800px; height: 300px;">
                    <div class="ribbon ribbon-top-left"><span>Uber Eats</span></div>
                    <div class="w-2/5 m-auto">
                        <img class="rounded-2xl" src="https://images.thrillophilia.com/image/upload/s--XcozMrbO--/c_fill,g_auto,h_600,q_auto,w_975/f_auto,fl_strip_profile/v1/images/photos/000/178/583/original/1573565509_cover.jpg.jpg" style="width: 196px; height: 196px;"></img>
                    </div>
                    <div class="flex flex-col w-3/5 h-42">
                        <div class="flex flex-col w-3/5 h-32" >
                            <p class="w-full text-2xl text-gray-900 pt-5 pl-5 pr-5 ">${place.name}</p>
                            <div class="flex flex-col pl-5 pr-5 ">
                                <p class="w-40 text-gray-500">Modern European</p>
                                <div class="flex mt-2">
                                    <p class="ext-xs text-gray-500 mr-3">${place.rating}</p>
                                    <div >
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star"></span>
                                        <span class="fa fa-star"></span>
                                    </div>
                                    
                                </div>
                                <div>
                                    <div class="mt-2 mb-2 w-24 text-center shadow-lg rounded-3xl text-black bg-white-400 px-2 py-1">
                                        Opened
                                    </div>
                                </div>
                                
                            </div>
                        </div>

                        <div class="flex w-3/5 mt-10 pl-5 pr-5">
                            <button class="bg-black text-white font-regular py-2 px-4 border border-gray-400 rounded-xl shadow">
                                Book a cab
                              </button>
                        </div>
                    </div>
                    
                    <div class="pt-2">
                        <img src="https://img.icons8.com/external-tanah-basah-glyph-tanah-basah/42/000000/external-plus-user-interface-tanah-basah-glyph-tanah-basah-2.png"/>                        
                    </div>
                </div>`
    
    // `<div class="bg-white p-6 rounded-lg shadow-lg">
    //     <div class="px-6 py-4">
    //         <div class="flex justify-between">
    //             <div class="font-bold text-xl mb-2">${place.name}</div>
    //             <input onchange="togglePlaceCheckbox(this)" type="checkbox" value="${place.name}" id="${place.place_id}" class="fw-6 h-6 rounded">      
    //         </div>
    //       <p class="text-gray-700 text-base">
    //       </p>
    //     </div>
    //     <div class="form-check">
    //     </div>
    //     <div class="px-6 pt-4 pb-2">
    //       <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">${place.rating}/5</span>
    //       <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">${place.types[0]}</span>
    //       <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">${place.types[1]}</span>
    //     </div>
    //   </div>`;
    document.getElementById("recommendation_area").innerHTML +=
      recommendation_area_html;
  }

  
  function calculateUberFare(latitude, longitude) {}

  function rederSuggestedData(final_data) {
    let results = final_data; //JSON.parse(final_data);
    console.log("results- " + results);
    document.getElementById("area").innerHTML += `<div>
                  <iframe width="412" height="232" src="https://www.youtube.com/embed/${final_data[0].items[0].id.videoId}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                  <iframe width="412" height="232" src="https://www.youtube.com/embed/${final_data[0].items[1].id.videoId}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
              </div>`;
  }

  function aggregateData(key) {
    return new Promise((resolve, reject) => {
      const getYouTubeResult = new Promise((resolve, reject) => {
        const query = `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=4&q=${key}&type=video&key=AIzaSyCPEtuFv56vKRM_Cb2MTSuP3_87Mc20Cuo`;
        const search_google_api = `https://serpapi.com/search.json?q=${key}&hl=en&gl=us&google_domain=google.com&api_key=f70cce2ec221209bcd45af4533adbbc51c51b682c29251b618061115c6e95d5c`;
        fetch(query, {
          method: "GET",
          headers: {
            Accept: "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => resolve(data))
          .catch(function (err) {
            console.log("Fetch Error :-S", err);
            reject(err);
          });
      });

      Promise.all([getYouTubeResult]).then((final_data) => {
        console.log(JSON.stringify(final_data));
        resolve(rederSuggestedData(final_data));
      });
    });
  }
</script>

<script>
  let selectedPlaces = [];

  function togglePlaceCheckbox(element) {
    if (element.checked && !(selectedPlaces.filter((place) => place.place_id == element.id) > 0)) {
      addPlaceToQueue(element.value, element.id);
    }
  }

  function addPlaceToQueue(name, id) {
    let placeObject = {
      name: name,
      place_id: id,
    };
    selectedPlaces.push(placeObject);
  }


  function calculateAndDisplayRoute(startLocation, endLocation, directionsService, directionsRenderer) {
    const waypts = [];

    // const checkboxArray = document.getElementById("waypoints");

    // for (let i = 0; i < checkboxArray.length; i++) {
    //   if (checkboxArray.options[i].selected) {
    //     waypts.push({
    //       location: checkboxArray[i].value,
    //       stopover: true,
    //     });
    //   }
    // }

    for (let i = 0; i < selectedPlaces.length; i++) {
        waypts.push({
          location: {placeId: selectedPlaces[i].place_id},
          stopover: true,
        });
    }

    var rendererOptions = {
      map: map,
      suppressMarkers: false,
      polylineOptions: {
        strokeColor: 'red',
        strokeWeight: 12
      }
    };

    let multiRouteDirectionRenderer = new google.maps.DirectionsRenderer(rendererOptions);

    multiRouteDirectionRenderer.setMap(map);

    directionsService
      .route({
        origin: startLocation, //document.getElementById("start").value,
        destination: endLocation, //document.getElementById("end").value,
        waypoints: waypts,
        optimizeWaypoints: true,
        travelMode: google.maps.TravelMode.DRIVING,
      })
      .then((response) => {
        multiRouteDirectionRenderer.setDirections(response);

        console.log(response)
        const route = response.routes[0];
        console.log(route)
        const summaryPanel = document.getElementById("directions-panel");

        let orderedPlaceName = []
        orderedPlaceName.push(startLocation)

        for(let i = 0; i< route.waypoint_order.length; i++){
            orderedPlaceName.push(selectedPlaces[route.waypoint_order[i]].name)
        }
        orderedPlaceName.push(endLocation)

        summaryPanel.innerHTML = "";

        // For each route, display summary information.
        for (let i = 0; i < route.legs.length; i++) {
          const routeSegment = i + 1;

          summaryPanel.innerHTML += 

          `<div class="route-card bg-white-200" style="width: 654px; height: 278px;">
                        <div class="flex items-center justify-center flex-1 p-6 bg-purple-50 bg-opacity-0 border rounded-3xl border-gray-100 shadow-2xl">
                            <div class="flex flex-col w-full space-y-4 h-full">
                                <div class="w-full">
                                    <div class="flex items-center justify-between flex-1 h-full px-6 py-6 bg-purple-50 rounded-3xl">
                                        <p class="text-xl font-medium text-indigo-600">${route.legs[i].distance.text}</p>
                                        <p class="text-4xl font-heavy text-red-400">${route.legs[i].duration.text}</p>
                                    </div>
                                </div>
                                <div class="m-5 flex flex-col items-start justify-end w-full">
                                    <div class="flex">
                                        
                                        <div class="m-auto w-5 h-5 bg-white border-2 rounded-full border-red-400"></div>

                                        <div class="mt-2 ml-5 mr-5 flex flex-col space-y-0.5 justify-end ">
                                            <p class="text-sm font-medium text-gray-400">Pickup location</p>
                                            <p class="text-base font-medium text-gray-800">${orderedPlaceName[i]}</p>
                                        </div>
                                    </div>
                                    <div class="border-2-2 relative border-dashed border-blue-500 h-4 border" style="top: 24.5%; left: 1.5%;"></div>

                                    <div class="flex">
                                        <img class="m-auto w-5" src="https://img.icons8.com/color/64/000000/marker--v1.png"/>  
                                        <div class="mb-2 ml-5 mr-5 flex flex-col justify-end">
                                            <p class="text-sm font-medium text-gray-400">Drop off</p>
                                            <p class="text-base font-medium text-gray-800">${orderedPlaceName[i+1]}</p>
                                        </div>
                                    </div>
                                    
                                    <!--
                                    <div class="w-5 h-1/5 bg-red-400 rounded-lg"></div>
                                    <div class="w-5 h-1/5 bg-white border-2 rounded-full border-red-400"></div>
                                    <div class="transform -rotate-90 w-14 h-0.5 border-gray-200"></div>
                                    -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="vertical-line"></div>`
          // `<div class="flex flex-row m-auto mt-5 mb-5">
          //   <div class="max-w-sm rounded overflow-hidden shadow-lg">
          //       <div class="px-6 py-4">
          //           <div class="flex justify-between">
          //               <div class="font-bold text-xl mb-2">${orderedPlaceName[i]}</div>
          //           </div>
          //           <p class="text-gray-700 text-base">
          //           </p>
          //       </div>
          //     </div>

          //     <div class="flex flex-col justify-between mt-auto mb-auto ml-5 mr-5">
          //       <div class="m-auto">
          //           <i class="fa fa-long-arrow-right align-middle arrow1" aria-hidden="true"></i>
          //       </div>

          //       <div class="flex flex-col">
          //           <span class="inline-block bg-green-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 m-auto">${route.legs[i].distance.text}</span>
          //           <span class="inline-block bg-green-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 m-auto">${route.legs[i].duration.text}</span>    
          //       </div>
          //     </div>
              
          //     <div class="max-w-sm rounded overflow-hidden shadow-lg">
          //       <div class="px-6 py-4">
          //           <div class="flex justify-between">
          //               <div class="font-bold text-xl mb-2">${orderedPlaceName[i+1]}</div>
          //           </div>
          //       </div>

          //     </div>
          // </div> `;
        }
      })
      .catch((e) => window.alert("Directions request failed due to " + e + status));

     
  }



</script>

<style>

  html, body {
    font-family: 'Quicksand';
    height: 100%;                                           
  }


  i {
    color: blue;
    margin-left: 20px;
  }

  .arrow1 {
    animation: slide1 1s ease-in-out infinite;
    margin-left: 9px;
  }

  @keyframes slide1 {
    0%,
    100% {
      transform: translate(0, 0);
    }

    50% {
      transform: translate(10px, 0);
    }
  }

  .slider-card {
    position: absolute;
    bottom: 0;
    border-radius:.35rem;
    overflow: hidden;
    width: 100%;
    background-color: white;
    border-top-right-radius:30px;
    border-top-left-radius:30px;
    z-index: -1;
    transition: bottom 1s;
  }
  
  .card-body {
    
    min-width: 100%;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: white;
  }
  
  .card-text {
    color: #2b0099;
    height: 100px;
  }
  


  .vertical-line{
      display: inline-block;
      border-left: 2px solid rgb(153, 152, 152);
      margin: 0 10px;
      height: 125px;
      z-index: -1000;
  }

    @media(min-width: 524px){
      .vertical-line{
          display: inline-block;
          border-left: 2px solid rgb(153, 152, 152);
          margin: 0 10px;
          height: 160px;
          z-index: -1000;
      }
    }
  

</style>

<script>
  var clicked=true;

  $(document).ready(function(){
    $("#recommendPlacesButton").click(function () {
      if(clicked)
      {
          clicked=false;
          $(".slider-card").css({"bottom": "70%"});
      }
      else
      {
          clicked=true;
          $(".slider-card").css({"bottom": "0"});
      }
    });
  });


</script>