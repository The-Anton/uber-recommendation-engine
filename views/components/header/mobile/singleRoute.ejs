<meta charset="UTF-8" />
<title>Uber</title>


<style>
  html,
  body {
    font-family: "Quicksand";
    height: 100%;
  }

  i {
    color: blue;
    margin-left: 20px;
  }

  .arrow1 {
    animation: slide1 1s ease-in-out infinite;
    margin-left: 9px;
  }

  @keyframes slide1 {
    0%,
    100% {
      transform: translate(0, 0);
    }

    50% {
      transform: translate(10px, 0);
    }
  }

  .slider-card {
    border-radius: 0.35rem;
    overflow: hidden !important;
    width: 100%;
    height: 0%;
    background-color: white;
  }

  .card-body {
    position: fixed;
    bottom: 0px;
    height: 0;
    min-width: 100%;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: white;
    transition: top 1s;
    border-top-right-radius: 30px;
    border-top-left-radius: 30px;
    transition: all 1s;
  }

  .card-text {
    color: #2b0099;
    height: 100px;
  }

  .card-body.transition {
    height: 60%;
    overflow-y: scroll;
    transition: all 1s;
  }

  .vertical-line {
    display: inline-block;
    border-left: 2px solid rgb(153, 152, 152);
    margin: 0 10px;
    height: 125px;
    z-index: -1000;
  }

  @media (min-width: 524px) {
    .vertical-line {
      display: inline-block;
      border-left: 2px solid rgb(153, 152, 152);
      margin: 0 10px;
      height: 160px;
      z-index: -1000;
    }
  }

  .ribbon {
    width: 150px;
    height: 150px;
    overflow: hidden;
    position: absolute;
  }
  .ribbon::before,
  .ribbon::after {
    position: absolute;
    z-index: -1;
    content: "";
    display: block;
    border: 5px solid #3fc060;
  }
  .ribbon span {
    position: absolute;
    display: block;
    width: 225px;
    padding: 15px 0;
    background-color: #3fc060;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
    color: #fff;
    font: 700 18px/1 "Lato", sans-serif;
    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
    text-transform: uppercase;
    text-align: center;
  }

  /* top left*/
  .ribbon-top-left {
    top: -10px;
    left: -10px;
  }
  .ribbon-top-left::before,
  .ribbon-top-left::after {
    border-top-color: transparent;
    border-left-color: transparent;
  }
  .ribbon-top-left::before {
    top: 0;
    right: 0;
  }
  .ribbon-top-left::after {
    bottom: 0;
    left: 0;
  }
  .ribbon-top-left span {
    right: -25px;
    top: 30px;
    transform: rotate(-45deg);
  }

  .fa-star {
    color: gold;
  }
</style>

<script>
  var map = null;
  var boxpolys = null;
  var directions = null;
  var routeBoxer = null;
  var distance = null; // km
  var service = null;
  var gmarkers = [];
  var boxes = null;
  var suggestedPlaces = [];
  var aroundRoutePlaces = [];
  var infowindow = new google.maps.InfoWindow();
  let mapStyles = [
    {
      featureType: "administrative",
      elementType: "geometry",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
    {
      featureType: "administrative.land_parcel",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
    {
      featureType: "administrative.neighborhood",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
    {
      featureType: "poi",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
    {
      featureType: "poi",
      elementType: "labels.text",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
    {
      featureType: "road",
      elementType: "labels",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
    {
      featureType: "road",
      elementType: "labels.icon",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
    {
      featureType: "transit",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
    {
      featureType: "water",
      elementType: "labels.text",
      stylers: [
        {
          visibility: "off",
        },
      ],
    },
  ];

  window.onload = async function () {
    // check for Geolocation support
    if (navigator.geolocation) {
      console.log("Geolocation is supported!");

      const queryParams = window.location.search;
      let urlParams = new URLSearchParams(queryParams);
      let origin = urlParams.get("origin");
      let destination = urlParams.get("destination");

      var startPos;
      var geoOptions = {
        enableHighAccuracy: true,
      };
      var geoSuccess = function (position) {
        startPos = position;
        latitude = startPos.coords.latitude || urlParams.get("lat");
        longitude = startPos.coords.longitude || urlParams.get("lon");
        google.maps.event.addDomListener(
          window,
          "load",
          initialize(latitude, longitude, origin, destination)
        );


      };
      var geoError = function (error) {
        console.log("Error occurred. Error code: " + error.code);
      };

      navigator.geolocation.getCurrentPosition(
        geoSuccess,
        geoError,
        geoOptions
      );
    } else {
      console.log("Geolocation is not supported for this Browser/OS.");
    }
  };

  function initialize(latitude, longitude, origin, destination) {
    // Default the map view to the continental U.S.
    var mapOptions = {
      center: new google.maps.LatLng(latitude, longitude),
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      zoom: 12,
      disableDefaultUI: true,
    };
    map = new google.maps.Map(document.getElementById("map"), mapOptions);
    service = new google.maps.places.PlacesService(map);

    routeBoxer = new RouteBoxer();

    directionService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer({
      map: map,
      polylineOptions: {
        strokeColor: "black",
        strokeWeight: 4,
      },
    });

    map.set("styles", mapStyles);
    route(origin, destination);

    getRecommendationForLocation(latitude,longitude, 1500)
                      .then((result)=> {
                        renderSuggestions(result);
                      })
                      .catch((err)=>{
                        console.log(err);
                      })
  }

  function route(origin, destination) {
    // Clear any previous route boxes from the map
    clearBoxes();

    // Convert the distance to box around the route from miles to km
    //distance = parseFloat(document.getElementById("distance").value) * 1.609344;
    distance = 2 * 1.609344;

    var request = {
      origin: origin || document.getElementById("from").value,
      destination: destination || document.getElementById("to").value,
      travelMode: google.maps.DirectionsTravelMode.DRIVING,
    };

    // Make the directions request
    directionService.route(request, function (result, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        directionsRenderer.setDirections(result);

        // Box around the overview path of the first route
        var path = result.routes[0].overview_path;
        boxes = routeBoxer.box(path, distance);
        // alert(boxes.length);
        drawBoxes();
        findPlaces(0);
      } else {
        alert("Directions query failed: " + status);
      }
    });
  }

  // Draw the array of boxes as polylines on the map
  function drawBoxes() {
    boxpolys = new Array(boxes.length);
    for (var i = 0; i < boxes.length; i++) {
      boxpolys[i] = new google.maps.Rectangle({
        bounds: boxes[i],
        fillOpacity: 0,
        strokeOpacity: 1.0,
        strokeColor: "#000000",
        strokeWeight: 1,
        map: map,
      });
    }
  }

  function findPlaces(searchIndex) {
    var type = getCombinedBestTasks();
    var keyword = "visit";
    var name = "";
    var request = {
      bounds: boxes[searchIndex],
    };
    if (!!type && type != "") {
      if (type.indexOf(",") > 0) request.types = type.split(",");
      else request.types = [type];
    }
    if (!!keyword && keyword != "") request.keyword = keyword;
    if (!!name && name != "") request.name = name;
    service.nearbySearch(request, function (results, status) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {

        aroundRoutePlaces = results;
        console.log(aroundRoutePlaces);
        for (var i = 0, result; (result = results[i]); i++) {
          let typesArray = result.types;
          if (typesArray.includes("tourist_attraction") || typesArray.includes("restaurant")) {
            var marker = createMarker(result);
          }
        }
      } else {

      }
      if (status != google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
        searchIndex++;
        if (searchIndex < boxes.length) findPlaces(searchIndex);
      } else {
        // delay 1 second and try again
        setTimeout("findPlaces(" + searchIndex + ")", 1000);
      }
    });
  }

  // Clear boxes currently on the map
  function clearBoxes() {
    if (boxpolys != null) {
      for (var i = 0; i < boxpolys.length; i++) {
        boxpolys[i].setMap(null);
      }
    }
    boxpolys = null;
  }

  function createMarker(place) {
    var placeLoc = place.geometry.location;
    if (place.icon) {
      var image = new google.maps.MarkerImage(
        place.icon,
        new google.maps.Size(71, 71),
        new google.maps.Point(0, 0),
        new google.maps.Point(17, 34),
        new google.maps.Size(25, 25)
      );
    } else
      var image = {
        url: "https://maps.gstatic.com/intl/en_us/mapfiles/markers2/measle.png",
        size: new google.maps.Size(7, 7),
        anchor: new google.maps.Point(3.5, 3.5),
      };

    var marker = new google.maps.Marker({
      map: map,
      icon: image,
      position: place.geometry.location,
    });
    var request = {
      reference: place.reference,
    };
    google.maps.event.addListener(marker, "click", function () {
      service.getDetails(request, function (place, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
          var contentStr =
            "<h5>" + place.name + "</h5><p>" + place.formatted_address;
          if (!!place.formatted_phone_number)
            contentStr += "<br>" + place.formatted_phone_number;
          if (!!place.website)
            contentStr +=
              '<br><a target="_blank" href="' +
              place.website +
              '">' +
              place.website +
              "</a>";
          contentStr += "<br>" + place.types + "</p>";
          infowindow.setContent(contentStr);
          infowindow.open(map, marker);
        } else {
          var contentStr = "<h5>No Result, status=" + status + "</h5>";
          infowindow.setContent(contentStr);
          infowindow.open(map, marker);
        }
      });
    });
    gmarkers.push(marker);
    if (!place.name) place.name = "result " + gmarkers.length;

  }

  function filterPlaces(type){
    let countFlag = 0;
    document.getElementById("recommendation_area").innerHTML = "";
    for (var i = 0; i < aroundRoutePlaces.length; i++) {
      let place = aroundRoutePlaces[i];
      let typesArray = aroundRoutePlaces[i].types;

      if (typesArray.includes(type)){
        console.log(aroundRoutePlaces[i]);
        countFlag = 1;
        renderFilteredRecommendations(aroundRoutePlaces[i], type)
      }
    }

    if(!countFlag) noPlaceFound(type);
  }

  function renderSuggestions(result){
    document.getElementById("recommendation_area").innerHTML = "";
    let places = result[0];
    let multipleType = result[1];
    let countFlag = 0;
    for (var i = 0; i < places.length; i++) {
      let place = places[i];
      let typesArray = places[i].types;

      for(let j=0; j<multipleType.length; j++){
        if (typesArray.includes(multipleType[j])){
          countFlag = 1;
          renderFilteredRecommendations(places[i], multipleType[j]);
          break;
        }
      }

    }

    if(!countFlag) document.getElementById("recommendation_area").innerHTML = `<p class="m-5 mt-16 text-2xl">Currently no suggestions.</p>`;

  }

  function renderFilteredRecommendations(place, type) {
    let placeImageURL = null;
    let uberEatsTags = `<div class="ribbon ribbon-top-left"><span>Uber Eats</span></div>`;
    let imageArray = ["https://images.thrillophilia.com/image/upload/s--XcozMrbO--/c_fill,g_auto,h_600,q_auto,w_975/f_auto,fl_strip_profile/v1/images/photos/000/178/583/original/1573565509_cover.jpg.jpg",
                      "https://www.sundayguardianlive.com/wp-content/uploads/2020/07/3-Dib-restaurant-losses-edited.jpg",
                      "https://static.toiimg.com/thumb/68007187/garden.jpg?width=1200&height=900",
                      "https://images.unsplash.com/photo-1524443169398-9aa1ceab67d5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8dGVtcGxlfGVufDB8fDB8fA%3D%3D&w=1000&q=80"]

    
    if(type == "restaurant"){
      placeImageURL = imageArray[1];
    }else if(type == "tourist_attraction"){
      placeImageURL = imageArray[0];
      uberEatsTags = ``;
    }else if(type == "hindu_temple"){
      placeImageURL = imageArray[3];
      uberEatsTags = ``;
    }else if(type == "park"){
      placeImageURL = imageArray[2];
      uberEatsTags = ``;
    }else {
      placeImageURL = imageArray[0];
      uberEatsTags = ``;
    }

    var recommendation_area_html = `<div class="place-card relative flex flex-col bg-white-200 mt-12 mb-12 p-5 shadow rounded-2xl border-gray-500 shadow-2xl" style="width: 800px;">
                    <div class="flex">
                        <div class="w-2/5 m-auto">
                            <img class="rounded-2xl" src="${placeImageURL}" style="width: 256px; height: 240px;"></img>
                        </div>
                        <div class="flex flex-col w-3/5 h-42">
                            <div class="flex flex-col w-full h-42" >
                                <p class="w-full font-bold text-2xl text-gray-900 pl-5 pr-5 ">${place.name}</p>
                                <div class="flex flex-col pl-5 pr-5 ">
                                    <p class="w-40 text-gray-500">Modern European</p>
                                    <div class="flex mt-2">
                                        <p class="ext-xs text-gray-500 mr-3">${place.rating}</p>
                                        <div >
                                            <span class="fa fa-star checked"></span>
                                            <span class="fa fa-star checked"></span>
                                            <span class="fa fa-star checked"></span>
                                            <span class="fa fa-star"></span>
                                            <span class="fa fa-star"></span>
                                        </div>
                                        
                                    </div>
                                    <div class="flex w-full">
                                        <div class="mt-6 mb-2 text-center shadow-lg rounded-3xl text-xl text-white bg-green-400 px-4 py-1">
                                            Opened
                                        </div>
                                    </div>
                                    
                                </div>
                            </div>

                            <div class="flex w-full mt-2 pl-5 pr-5">
                                <button class="bg-black font-bold text-xl text-white font-regular py-4 px-6 border border-gray-400 rounded-xl shadow">
                                  ₹125 Book Ride
                                  </button>

                                  <button onclick="knowMorePage()" class="bg-black font-bold text-xl ml-5 text-white font-regular py-4 px-6 border border-gray-400 rounded-xl shadow">
                                                Know More
                                            </button>
                            </div>
                        </div>
                        
                        <div class="pt-2">
                          <div class="form-check">
                            <input class="form-check-input appearance-none h-8 w-8 border border-black rounded-sm bg-white checked:bg-black checked:border-black focus:outline-none transition duration-200 mt-1 align-top bg-no-repeat bg-center bg-contain float-left mr-2 cursor-pointer" type="checkbox" onclick="togglePlaceCheckbox(this)" value="${place.name}" id="${place.place_id}">                        
                          </div>
                        </div>
                    
` + uberEatsTags + 
`
</div>
<div id="${place.place_id}footer" class=" text-xl font-bold m-2 ml-auto mr-auto"></div>

</div> `;

    document.getElementById("recommendation_area").innerHTML +=
      recommendation_area_html;
  }

  function renderAllRouteRecommendation(){
    let countFlag = 0;
    document.getElementById("recommendation_area").innerHTML = "";
    for (var i = 0; i < aroundRoutePlaces.length; i++) {
      let place = aroundRoutePlaces[i];
      let typesArray = aroundRoutePlaces[i].types;

        console.log(aroundRoutePlaces[i]);
        countFlag = 1;
        renderFilteredRecommendations(aroundRoutePlaces[i], typesArray[0]);
    }

    if(!countFlag) document.getElementById("recommendation_area").innerHTML = `<p class="m-5 mt-16 text-2xl">Currently no suggestions.</p>`;
  }

  function noPlaceFound(type){
    if(type == "restaurant"){
      document.getElementById("recommendation_area").innerHTML = `<p class="m-5 mt-16 text-2xl">No Active Restaurants Nearby.</p>`;
    }else if(type == "tourist_attraction"){
      document.getElementById("recommendation_area").innerHTML = `<p class="m-5 mt-16 text-2xl">No Tourist Places Nearby.</p>`;
    }else if(type == "hindu_temple"){
      document.getElementById("recommendation_area").innerHTML = `<p class="m-5 mt-16 text-2xl">No Relegious Place Nearby.</p>`;
    }else if(type == "park"){
      document.getElementById("recommendation_area").innerHTML = `<p class="m-5 mt-16 text-2xl">No Park Nearby.</p>`;
    }else {
      document.getElementById("recommendation_area").innerHTML = `<p class="m-5 mt-16 text-2xl">No Active Place Nearby.</p>`;

    }
  }



</script>
